{"version":3,"sources":["components/Navigation.js","pages/Home.js","components/memory/Card.js","components/memory/GuessCount.js","components/memory/HallOfFame.js","components/memory/HighScoreInput.js","pages/Memory.js","pages/MemorySimple.js","components/pendu/LetterButton.js","components/pendu/WordShower.js","components/pendu/Counter.js","pages/Pendu.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","className","to","Home","Card","card","feedback","index","onClick","GuessCount","guesses","HallOfFame","entries","map","date","id","player","key","saveHOFEntry","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","HighScoreInput","state","winner","handleWinnerUpdate","event","setState","target","value","toUpperCase","persistWinner","preventDefault","onSubmit","this","type","onChange","autoComplete","Component","Memory","cards","generateCards","currentPair","matchedCardIndices","hallOfFame","displayHallOfFame","handleCardClick","handleNewPairClosedBy","bind","newPair","newGuesses","matched","setTimeout","result","candidates","shuffle","SIDE","pop","indexMatched","includes","won","getFeedbackForCard","MemorySimple","LetterButton","letter","pressed","WordShower","wordaslist","lettertried","Counter","Pendu","alphabetlist","split","letterTried","word","handleLetterClick","console","log","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e9101ff.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link , withRouter} from 'react-router-dom'\r\nimport './Navigation.css' \r\n\r\nfunction Navigation(props) {\r\n    return(\r\n      <div className = \"navigation magenta\">\r\n        <Link to = \"/myreactwebsite\">\r\n          MAIN PAGE\r\n        </Link>\r\n        \r\n        <ul className = \"pageslist\">\r\n        <li>\r\n            <Link to = \"/myreactwebsite/memory\">\r\n              Memory\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to = \"/myreactwebsite/memorysimple\">\r\n              Memory Simple\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to = \"/myreactwebsite/pendu\">\r\n              Hang-man\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n\r\n      </div>\r\n\r\n    )\r\n}\r\n\r\nexport default withRouter(Navigation);","import React from \"react\";\r\nimport \"./Pages.css\";\r\nfunction Home(){\r\n    return(\r\n      <div className = \"home page dark\">\r\n          This is the website where I show what I learned during the online cours about React.js \r\n      </div>  \r\n    );\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Card.css'\r\n\r\nconst HIDDEN_SYMBOL = '❓'\r\n\r\n\r\nconst Card = ({card , feedback,index, onClick}) => (\r\n<div className={`card ${feedback}`} onClick = {() => onClick(index)}>\r\n  <span className=\"symbol\">\r\n    {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\r\n  </span>\r\n</div>\r\n)\r\n\r\nCard.propTypes = {\r\n  card : PropTypes.string.isRequired,\r\n  feedback : PropTypes.oneOf([\r\n    'visible',\r\n    'hidden',\r\n    'justMatched',\r\n    'justMismatched'\r\n  ]).isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  onClick : PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default Card","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './GuessCount.css'\r\n\r\nconst GuessCount = ({guesses}) => <div className=\"guesses\" >{guesses}</div>\r\n\r\nGuessCount.propTypes = {\r\n    guesses: PropTypes.number.isRequired\r\n}\r\n\r\nexport default GuessCount","import PropTypes from 'prop-types'\r\nimport React from 'react'\r\n\r\nimport './HallOfFame.css'\r\n\r\nconst HallOfFame = ({ entries }) => (\r\n  <div className = 'dark round'>\r\n    <table className=\"hallOfFame\">\r\n      <tbody>\r\n        {entries.map(({ date, guesses, id, player }) => (\r\n          <tr key={id}>\r\n            <td className=\"date\">{date}</td>\r\n            <td className=\"guesses\">{guesses}</td>\r\n            <td className=\"player\">{player}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  \r\n)\r\n\r\nHallOfFame.propTypes = {\r\n  entries: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      date: PropTypes.string.isRequired,\r\n      guesses: PropTypes.number.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      player: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n}\r\n\r\nexport default HallOfFame\r\n\r\n// == Internal helpers ==============================================\r\n\r\n\r\nconst HOF_KEY = '::Memory::HallofFame'\r\nconst HOF_MAX_SIZE = 30\r\n\r\nexport function saveHOFEntry(entry, onStored) {\r\n  entry.date = new Date().toLocaleDateString()\r\n  entry.id = Date.now()\r\n\r\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\r\n  const insertionPoint = entries.findIndex(\r\n    ({ guesses }) => guesses >= entry.guesses\r\n  )\r\n\r\n  if (insertionPoint === -1) {\r\n    entries.push(entry)\r\n  } else {\r\n    entries.splice(insertionPoint, 0, entry)\r\n  }\r\n  if (entries.length > HOF_MAX_SIZE) {\r\n    entries.splice(HOF_MAX_SIZE, entries.length)\r\n  }\r\n\r\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries))\r\n  onStored(entries)\r\n}","import PropTypes from 'prop-types'\r\nimport React, { Component } from 'react'\r\n\r\nimport './HighScoreInput.css'\r\n\r\nimport { saveHOFEntry } from './HallOfFame'\r\n\r\nclass HighScoreInput extends Component {\r\n  state = {winner : ''}\r\n\r\n  //arrow fx for binding\r\n  handleWinnerUpdate = event => {\r\n    this.setState({winner: event.target.value.toUpperCase()})\r\n  }\r\n\r\n  //arrow fx for binding\r\n  persistWinner = event =>{\r\n    event.preventDefault()\r\n    const newEntry = {guesses : this.props.guesses, player : this.state.winner}\r\n    saveHOFEntry(newEntry,this.props.onStored) \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"highScoreInput\" onSubmit = {this.persistWinner}>\r\n        <p>\r\n          <label>\r\n            Bravo ! Entre ton prénom :\r\n            <input \r\n              type=\"text\" \r\n              onChange = {this.handleWinnerUpdate}\r\n              autoComplete=\"given-name\" \r\n              value = {this.state.winner}\r\n            />\r\n          </label>\r\n          <button type=\"submit\">J’ai gagné !</button>\r\n        </p>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nHighScoreInput.propTypes = {\r\n  guesses: PropTypes.number.isRequired,\r\n  onStored: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default HighScoreInput","import React, { Component } from 'react'\r\nimport shuffle from 'lodash.shuffle'\r\n\r\n\r\n\r\nimport Card from '../components/memory/Card'\r\nimport GuessCount from '../components/memory/GuessCount'\r\nimport HallOfFame,{FAKE_HOF} from '../components/memory/HallOfFame'\r\nimport HighScoreInput from '../components/memory/HighScoreInput'\r\nimport '../App.css'\r\nconst SIDE = 6\r\nexport const SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\r\n\r\n\r\nconst VISUAL_PAUSE_MSECS=750\r\n\r\nclass Memory extends Component {\r\n  state = {\r\n    cards: this.generateCards(),\r\n    currentPair: [],\r\n    guesses: 0,\r\n    matchedCardIndices: [],\r\n    hallOfFame: null, \r\n  }\r\n  \r\n  //arrow fx for binding\r\n  displayHallOfFame = (hallOfFame) => {\r\n    this.setState({hallOfFame})\r\n  }\r\n  \r\n  constructor(props){\r\n    super(props)\r\n    this.handleCardClick = this.handleCardClick.bind(this)\r\n  }\r\n  \r\n  handleNewPairClosedBy(index) {\r\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\r\n\r\n    const newPair = [currentPair[0], index]\r\n    const newGuesses = guesses + 1\r\n    const matched = cards[newPair[0]] === cards[newPair[1]]\r\n    this.setState({ currentPair: newPair, guesses: newGuesses })\r\n    if (matched) {\r\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\r\n    }\r\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\r\n  }\r\n\r\n  generateCards() {\r\n    const result = []\r\n    const size = SIDE * SIDE\r\n    const candidates = shuffle(SYMBOLS)\r\n    while (result.length < size) {\r\n      const card = candidates.pop()\r\n      result.push(card, card)\r\n    }\r\n    return shuffle(result)\r\n  }\r\n\r\n  //Arrow fx for binding\r\n  handleCardClick = index => {\r\n    const {currentPair} = this.state\r\n    if (currentPair.length === 2){\r\n      return\r\n    }\r\n    if (currentPair.length === 0){\r\n      this.setState({currentPair: [index]})\r\n      return\r\n    }\r\n    this.handleNewPairClosedBy(index)\r\n  }\r\n\r\n  getFeedbackForCard(index){\r\n    const {currentPair,matchedCardIndices}=this.state\r\n    const indexMatched = matchedCardIndices.includes(index)\r\n\r\n    if(currentPair.length < 2){\r\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\r\n    }\r\n\r\n    if (currentPair.includes(index)){\r\n      return indexMatched ? 'justMatched' : 'justMismatched'\r\n    }\r\n    return indexMatched ? 'visible' : 'hidden'\r\n  }\r\n\r\n  render() {\r\n    const {cards, guesses,hallOfFame, matchedCardIndices}= this.state\r\n    const won = matchedCardIndices.length === cards.length\r\n    return (\r\n\r\n      <div className=\"page dark\">\r\n\r\n        Memory\r\n\r\n        <div className = \"explaination\">\r\n          In this game you must find pairs of cards.\r\n        </div>\r\n        \r\n        <section className = \" darksection memory round\">\r\n          <div className = \"dark round\">\r\n            Guesses : \r\n            <GuessCount guesses={guesses} />\r\n          </div>\r\n          <div className=\"cardgrid\">\r\n            {cards.map((card,index) => (\r\n            <Card\r\n              card = {card}\r\n              feedback={this.getFeedbackForCard(index)}\r\n              index = {index}\r\n              key = {index}\r\n              onClick = {this.handleCardClick}\r\n            /> \r\n            ))}\r\n\r\n          </div>\r\n          {\r\n            won && (\r\n              hallOfFame ? (\r\n                <HallOfFame entries = {this.state.hallOfFame} />\r\n              ):(\r\n                <HighScoreInput guesses={guesses} onStored={this.displayHallOfFame} />\r\n                \r\n              )\r\n            )\r\n          }\r\n        </section>  \r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Memory","import React, { Component } from 'react'\r\nimport shuffle from 'lodash.shuffle'\r\n\r\n\r\n\r\nimport Card from '../components/memory/Card'\r\nimport GuessCount from '../components/memory/GuessCount'\r\nimport HallOfFame,{FAKE_HOF} from '../components/memory/HallOfFame'\r\nimport HighScoreInput from '../components/memory/HighScoreInput'\r\n\r\nconst SIDE = 4\r\nexport const SYMBOLS = '😀🎉💖🎩🌍🌛🌞🍟'\r\n\r\n\r\nconst VISUAL_PAUSE_MSECS=750\r\n\r\nclass MemorySimple extends Component {\r\n  state = {\r\n    cards: this.generateCards(),\r\n    currentPair: [],\r\n    guesses: 0,\r\n    matchedCardIndices: [],\r\n    hallOfFame: null, \r\n  }\r\n  \r\n  //arrow fx for binding\r\n  displayHallOfFame = (hallOfFame) => {\r\n    this.setState({hallOfFame})\r\n  }\r\n  \r\n  constructor(props){\r\n    super(props)\r\n    this.handleCardClick = this.handleCardClick.bind(this)\r\n  }\r\n  \r\n  handleNewPairClosedBy(index) {\r\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\r\n\r\n    const newPair = [currentPair[0], index]\r\n    const newGuesses = guesses + 1\r\n    const matched = cards[newPair[0]] === cards[newPair[1]]\r\n    this.setState({ currentPair: newPair, guesses: newGuesses })\r\n    if (matched) {\r\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\r\n    }\r\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\r\n  }\r\n\r\n  generateCards() {\r\n    const result = []\r\n    const size = SIDE * SIDE\r\n    const candidates = shuffle(SYMBOLS)\r\n    while (result.length < size) {\r\n      const card = candidates.pop()\r\n      result.push(card, card)\r\n    }\r\n    return shuffle(result)\r\n  }\r\n\r\n  //Arrow fx for binding\r\n  handleCardClick = index => {\r\n    const {currentPair} = this.state\r\n    if (currentPair.length === 2){\r\n      return\r\n    }\r\n    if (currentPair.length === 0){\r\n      this.setState({currentPair: [index]})\r\n      return\r\n    }\r\n    this.handleNewPairClosedBy(index)\r\n  }\r\n\r\n  getFeedbackForCard(index){\r\n    const {currentPair,matchedCardIndices}=this.state\r\n    const indexMatched = matchedCardIndices.includes(index)\r\n\r\n    if(currentPair.length < 2){\r\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\r\n    }\r\n\r\n    if (currentPair.includes(index)){\r\n      return indexMatched ? 'justMatched' : 'justMismatched'\r\n    }\r\n    return indexMatched ? 'visible' : 'hidden'\r\n  }\r\n\r\n  render() {\r\n    const {cards, guesses,hallOfFame, matchedCardIndices}= this.state\r\n    const won = matchedCardIndices.length === cards.length\r\n    return (\r\n\r\n      <div className=\"page dark\">\r\n\r\n\r\n\r\n        Memory\r\n\r\n        <div className = \"explaination\">\r\n          In this game you must find pairs of cards.\r\n        </div>\r\n        <section className = \"memory darksection round\">\r\n          <div className = \"dark round\">\r\n            Guesses : \r\n            <GuessCount guesses={guesses} />\r\n          </div>\r\n          \r\n          <div className=\"cardgridsimple\">\r\n            {cards.map((card,index) => (\r\n            <Card\r\n              card = {card}\r\n              feedback={this.getFeedbackForCard(index)}\r\n              index = {index}\r\n              key = {index}\r\n              onClick = {this.handleCardClick}\r\n            /> \r\n            ))}\r\n\r\n          </div>\r\n          {\r\n            won && (\r\n              hallOfFame ? (\r\n                <HallOfFame entries = {this.state.hallOfFame} />\r\n              ):(\r\n                <HighScoreInput guesses={guesses} onStored={this.displayHallOfFame} />\r\n                \r\n              )\r\n            )\r\n          }\r\n        </section>  \r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MemorySimple","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './LetterButton.css'\r\n\r\n//buttons to press\r\nconst LetterButton =({letter , pressed, index, onClick}) => (\r\n    <div className = {`letter ${letter}`}\r\n     onClick = {() => onClick(index)}>\r\n         {pressed ? '_' : letter}\r\n     </div>\r\n)\r\n\r\nLetterButton.propTypes = {\r\n    letter : PropTypes.string.isRequired,\r\n    pressed : PropTypes.bool.isRequired,\r\n    index : PropTypes.number.isRequired,\r\n    onClick : PropTypes.func.isRequired,\r\n}\r\n\r\nexport default LetterButton","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst WordShower = (wordaslist,lettertried) =>(\r\n    <div>\r\n        Guesse the following word\r\n        {\r\n            wordaslist[8] \r\n        }\r\n  \r\n    </div>\r\n\r\n)\r\n\r\nexport default WordShower\r\n    ","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './pendu.css'\r\n\r\nconst Counter = ({guesses}) => <div className=\"guesses dark round\" >Wrong guesses : {guesses}</div>\r\n\r\nCounter.propTypes = {\r\n    guesses: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Counter","import React, {Component} from 'react';\r\n\r\n\r\nimport LetterButton from '../components/pendu/LetterButton'\r\nimport WordShower from '../components/pendu/WordShower'\r\nimport Counter from '../components/pendu/Counter.js'\r\nimport '../App.css'; \r\nimport './Pages.css'\r\nconst ALPHABET = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\nclass Pendu extends Component {\r\n  state = {\r\n    alphabetlist : ALPHABET.split(''),\r\n    letterTried : [],\r\n    guesses : 0,\r\n    word : \"bielorussie\"\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleLetterClick = this.handleLetterClick.bind(this)\r\n  }\r\n\r\n  //arrow fx for bindding\r\n  handleLetterClick = (index) => {\r\n    const { guesses,word} = this.state\r\n    const wordaslist = word.split('');\r\n    const newGuesses =guesses +1\r\n    const letterTried = this.state.letterTried\r\n    const letter = this.state.alphabetlist[index]\r\n    console.log(index,letter)\r\n    if (!letterTried.includes(letter)){\r\n      \r\n      this.setState({letterTried : [...letterTried, letter]})\r\n      \r\n      if (!wordaslist.includes(letter)){\r\n        this.setState({guesses : newGuesses})\r\n      }\r\n    \r\n      \r\n    }\r\n    \r\n  }\r\n\r\n  render(){\r\n    const {alphabetlist, letterTried,guesses,word} = this.state\r\n\r\n    const wordaslist = word.split('')\r\n\r\n    return(\r\n      <div className=\"page dark pendu\">\r\n        <header className=\"App-header\">\r\n          Hangman \r\n        </header>\r\n        <div className = \"explaination\">\r\n          In this game you need to find a given word in the smallest amount of guesses possible.\r\n        </div>\r\n        <section className = \"hangman round darksection\">\r\n          <Counter guesses = {guesses}/>\r\n          <section className = \"word\">\r\n          {wordaslist.map((letter,index)=>(\r\n            <div className ={`wordletter ${letter}`} key = {index}>\r\n              {letterTried.includes(letter) ? letter : \"_\"}\r\n            </div>\r\n          ))}\r\n          </section>\r\n          \r\n          <WordShower \r\n            wordaslist= {wordaslist}\r\n            lettertried = {letterTried}\r\n          />\r\n\r\n          <section className = \"keyboard wide round\">\r\n            {\r\n     \r\n              alphabetlist.map((letter,index) => (\r\n                <LetterButton\r\n                letter = {letter}\r\n                pressed = {letterTried.includes(letter)}\r\n                index = {index}\r\n                key = {index}\r\n                onClick = {this.handleLetterClick}\r\n                />\r\n              ))\r\n            }\r\n          </section>\r\n          \r\n        </section>\r\n      </div>\r\n    ) \r\n    \r\n  }\r\n    \r\n}\r\n    \r\n\r\n\r\nexport default Pendu;\r\n","import React from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom'\r\n\r\nimport Navigation from './components/Navigation' \r\nimport './App.css';\r\nimport Home from './pages/Home'\r\nimport Memory from './pages/Memory'\r\nimport MemorySimple from './pages/MemorySimple'\r\nimport Pendu from './pages/Pendu'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router className = \"dark wide\">\r\n        <Navigation />\r\n        <Switch>\r\n        <Route path = \"/myreactwebsite\" exact component = {() => <Home/>} />\r\n        <Route path = \"/\" exact component = {() => <Home/>} />\r\n        \r\n        <Route path = \"/myreactwebsite/memory\" exact component = {() => <Memory/>} />\r\n        <Route path = \"/myreactwebsite/memorysimple\" exact component = {() => <MemorySimple/>} />\r\n        <Route path = \"/myreactwebsite/pendu\" exact component = {() => <Pendu/>} />\r\n\r\n        </Switch>\r\n\r\n      </Router>\r\n        \r\n      \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}